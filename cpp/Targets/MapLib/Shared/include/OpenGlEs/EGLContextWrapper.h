/*
Copyright (c) 1999 - 2010, Vodafone Group Services Ltd
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the Vodafone Group Services Ltd nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


#ifndef _EGLCONTEXTWRAPPER_H_
#define _EGLCONTEXTWRAPPER_H_

#include "OpenGlEs.h"

// Make this nicer in the future.
#ifndef IPHONE 

class EGLContextWrapper {
public:
   
   /**
    *   Error codes that can be returned by some of
    *   the functions in this class.
    */ 
   
   enum ErrorCode {
      /* These are identical to the EGL error codes */
      SUCCESS = EGL_SUCCESS,
      NOT_INITIALIZED,
      BAD_ACCESS,
      BAD_ALLOC,
      BAD_ATTRIBUTE,
      BAD_CONFIG,
      BAD_CONTEXT,
      BAD_CURRENT_SURFACE,
      BAD_DISPLAY,
      BAD_MATCH,
      BAD_NATIVE_PIXMAP,
      BAD_NATIVE_WINDOW,
      BAD_PARAMETER,
      BAD_SURFACE,
      CONTEXT_LOST,
      
      /* These are additional error codes that can be generated
       * by the wrapper */
      NO_CONFIGURATIONS
   };


   /**
    *   Constructs an EGL wrapper, which can be used to initialize
    *   OpenGL ES contexts.
    *
    *   @param    windowType     The platform dependant window type.
    *                            For example HWND for windows etc.
    *                            See <GLES/egltypes.h> for your
    *                            specific platform type.
    *
    *   @param    displayDepth   The display depth of the display.
    *                            Should match that of whatever
    *                            region the renderer should work
    *                            with to optimize performance.
    *                            This depth can be retrieved
    *                            using platform specific calls.
    *                          
    */ 
   
   EGLContextWrapper( NativeWindowType nativeWindow,
                      NativeDisplayType nativeDisplay,
                      int displayDepth,
                      bool vsync);

   /**
    *   Initialize the EGL context, which will enable OpenGL ES
    *   to render to screen.
    *
    *   @return   ErrorCode for the operation, if successfull this
    *             will be equal to ErrorCode::SUCCESS. If not, use
    *             translateError to determine the cause of the error.
    */ 
   ErrorCode init();

   /**
    *   Destroys the EGL context and releases all resources.
    *
    *   @return   ErrorCode for the operation, if successfull this
    *             will be equal to ErrorCode::SUCCESS. If not, use
    *             translateError to determine the cause of the error.
    */ 
   
   ErrorCode destroyContext();
   
   /**
    *  Perform a buffer swap, which will swap the back buffer of our
    *  window surface to the actual surface.
    *
    *  @return   ErrorCode for the operation. @See init().
    *
    */
   
   ErrorCode doSwap();

   /**
    *   Translates an error generated by this class into a
    *   human-readable format.
    *
    *   @param    error   The error code to be translated.
    *   
    *   @return   The human-readable string.
    *
    */ 

   const char* translateError( ErrorCode error );

   /**
    *   Changes the window type and rebinds the context.
    *
    *   @param   newWindow   The new window to be set.
    */ 
   
   void changeWindow( NativeWindowType newWindow );
   
   /**
    *   Returns the last position in the setup process.
    *   Used to identify where errors occurred.
    *
    *   @return   String description of last position;   
    *
    */
   
   const char* getPosition();

   /**
    *   Returns the context display.
    *
    *   @return   The context display
    *
    */
   
   EGLDisplay getEGLDisplay();

   /**
    *   Returns the context surface.
    *
    *   @return   The context surface
    *
    */
   
   EGLSurface getEGLSurface();
   
private:

   void setPosition( const char* position );
   
   /**
    *   Abstract display upon which graphics are drawn. In most
    *   environments this will be a single physical screen.
    */
   
   EGLDisplay m_display;
   
   /**
    *   The drawing context. All drawing commands are performed
    *   according to the current context setup.
    *
    */ 
   
   EGLContext m_context;

   /**
    *   A drawing surface. There are three different kinds of
    *   drawing surfaces:
    *
    *   1)   Windows  - used for onscreen rendering.
    *   2)   Pbuffers - used for offscreen rendering typically
    *                   to OpenGL host space
    *   3)   Pixmaps  - used for offscreen rendering to buffers that
    *                   can be accessed through native memory
    *
    */ 

   EGLSurface m_surface;
   
   /**
    *   The configuration used for the current context and surface.
    *   The display is used to derive configuration.
    *   
    */

   EGLConfig m_config;
   
   /**
    *   A handle to the native window.
    *
    */
   
   NativeWindowType m_nativeWindow;

   /**
    *   A handle to the native display.
    *
    */
   
   NativeDisplayType m_nativeDisplay;

   /**
    *   The wanted colordepth of the rendering context. Colordepth is indicated
    *   in number of bits.
    */
   
   EGLint m_colorDepth;

   /**
    *   The current position in the setup context.
    *
    */ 
   
   const char* m_curPosition;

   /**
    *  Whether or not we should sync vertically.
    */
   bool m_vSync;
};

#endif /* IPHONE */

#endif /* _EGLCONTEXTWRAPPER_H_ */
